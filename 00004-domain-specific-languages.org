#+TITLE: Domain Specific Languages / 领域特定语言
#+SETUPFILE: theme.setup
#+INCLUDE: ./nav.org

译者序
前言
* 第一部分　叙　　述
** 第 1 章入门例子 2
*** 哥特式建筑安全系统 2
*** 状态机模型 4
*** 为格兰特小姐的控制器编写程序 7
*** 语言和语义模型 13
*** 用代码生成 15
*** 使用语言工作台 17
*** 可视化 20
** 第 2 章　使用 DSL21
*** 定义 DSL21
*** DSL 的问题 28
*** 2.4 广义的语言处理 31
*** DSL 的生命周期 31
*** 设计优良的 DSL 从何而来 32
** 第 3 章实现 DSL34
*** DSL 处理之架构 34
*** 解析器的工作方式 37
*** 文法、语法和语义 39
*** 解析中的数据 39
*** 宏 41
*** 测试 DSL42
*** 错误处理 50
*** DSL 迁移 51
** 第 4 章实现内部 DSL54
*** 连贯 API 与命令–查询 API54
*** 解析层的需求 57
*** 使用函数 58
*** 字面量集合 61
*** 基于文法选择内部元素 63
*** 闭包 64
*** 解析树操作 66
*** 标注 67
*** 为字面量提供扩展 69
*** 消除语法噪音 69
*** 动态接收 69
*** 提供类型检查 70
** 第 5 章实现外部 DSL72
*** 语法分析策略 72
*** 输出生成策略 74
*** 解析中的概念 76
*** 混入另一种语言 81
*** XML DSL82
** 第 6 章内部 DSL vs 外部 DSL84
*** 学习曲线 84
*** 创建成本 85
*** 程序员的熟悉度 85
*** 与领域专家沟通 86
*** 与宿主语言混合 86
*** 强边界 87
*** 运行时配置 87
*** 趋于平庸 88
*** 组合多种 DSL88
*** 总结 89
** 第 7 章其他计算模型概述 90
*** 7.1 几种计算模型 92
** 第 8 章代码生成 96
*** 选择生成什么 96
*** 如何生成 99
*** 混合生成代码和手写代码 100
*** 生成可读的代码 101
*** 解析之前的代码生成 101
*** 延伸阅读 101
** 第 9 章语言工作台 102
*** 语言工作台之要素 102
*** 模式定义语言和元模型 103
*** 源码编辑和投射编辑 107
*** 说明性编程 109
*** 工具之旅 110
*** 语言工作台和 CASE 工具 112
我们该使用语言工作台吗 112
* 第二部分　通 用 主 题
** 第 10 章各种 DSL116
*** Graphviz116
*** JMock117
*** CSS118
*** HQL119
*** XAML120
*** FIT122
*** Make 等 123
** 第 11 章语义模型 125
*** 工作原理 125
*** 使用场景 127
*** 入门例子（Java）128
** 第 12 章符号表 129
12.1 工作原理 129
12.2 使用场景 131
12.3 参考文献 131
12.4 以外部 DSL 实现的依赖网络（Java 和 ANTLR）131
12.5 在一个内部 DSL 中使用符号键（Ruby）133
12.6 用枚举作为静态类型符号（Java）134
** 第 13 章语境变量 137
13.1 工作原理 137
13.2 使用场景 137
13.3 读取 INI 文件（C#）138
** 第 14 章构造型生成器 141
14.1 工作原理 141
14.2 使用场景 142
14.3 构建简单的航班信息（C#）142
** 第 15 章宏 144
15.1 工作原理 144
15.1.1 文本宏 145
15.1.2 语法宏 148
15.2 使用场景 151
** 第 16 章通知 153
16.1 工作原理 153
16.2 使用场景 154
16.3 一个非常简单的通知（C#）154
16.4 解析中的通知（Java）155
* 第三部分　外部 DSL 主题
** 第 17 章分隔符指导翻译 160
17.1 工作原理 160
17.2 使用场景 162
17.3 常客记分（C#）163
17.3.1　语义模型 163
17.3.2 解析器 165
17.4 使用格兰特小姐的控制器解析非自治语句 (Java)168
** 第 18 章语法指导翻译 175
18.1 工作原理 175
18.1.1 词法分析器 176
18.1.2 语法分析器 179
18.1.3 产生输出 181
18.1.4 语义预测 181
18.2 使用场景 182
18.3 参考文献 182
** 第 19 章 BNF183
19.1 工作原理 183
19.1.1 多重性符号（Kleene 运算符）184
19.1.2 其他一些有用的运算符 186
19.1.3 解析表达式文法 186
19.1.4 将 EBNF 转换为基础 BNF187
19.1.5 行为代码 189
19.2 使用场景 191
** 第 20 章基于正则表达式表的词法分析器 192
20.1 工作原理 192
20.2 使用场景 193
20.3 格兰特小姐控制器的词法处理（Java）194
** 第 21 章递归下降法语法解析器 197
21.1 工作原理 197
21.2 使用场景 200
21.3 参考文献 200
21.4 递归下降和格兰特小姐的控制器（Java）201
** 第 22 章解析器组合子 205
22.1 工作原理 206
22.1.1 处理动作 208
22.1.2 函数式风格的组合子 209
22.2 使用场景 209
22.3 解析器组合子和格兰特小姐的控制器（Java）210
** 第 23 章解析器生成器 217
23.1 工作原理 217
23.2 使用场景 219
23.3Hello World（Java 和 ANTLR）219
23.3.1 编写基本的文法 220
23.3.2 构建语法分析器 221
23.3.3 为文法添加代码动作 223
23.3.4 使用代沟 225
第 24 章树的构建 227
24.1 工作原理 227
24.2 使用场景 229
24.3 使用 ANTLR 的树构建语法（Java 和 ANTLR）230
24.3.1 标记解释 230
24.3.2 解析 231
24.3.3 组装语义模型 233
24.4 使用代码动作进行树的构建（Java 和 ANTLR）236
第 25 章嵌入式语法翻译 242
25.1 工作原理 242
25.2 使用场景 243
25.3 格兰特小姐的控制器（Java 和 ANTLR）243
第 26 章内嵌解释器 247
26.1 工作原理 247
26.2 使用场景 247
26.3 计算器（ANTLR 和 Java）247
第 27 章外加代码 250
27.1 工作原理 250
27.2 使用场景 251
27.3 嵌入动态代码（ANTLR、Java 和 JavaScript）252
27.3.1 语义模型 252
27.3.2 语法分析器 254
第 28 章可变分词方式 258
28.1 工作原理 258
28.1.1 字符引用 259
28.1.2 词法状态 261
28.1.3 修改标记类型 262
28.1.4 忽略标记类型 263
28.2 使用场景 264
第 29 章嵌套的运算符表达式 265
29.1 工作原理 265
29.1.1 使用自底向上的语法分析器 265
29.1.2 自顶向下的语法分析器 266
29.2 使用场景 268
第 30 章以换行符作为分隔符 269
30.1 工作原理 269
30.2 使用场景 271
第 31 章外部 DSL 拾遗 272
31.1 语法缩进 272
31.2 模块化文法 274
第四部分　内部 DSL 主题
第 32 章表达式生成器 276
32.1 工作原理 276
32.2 使用场景 277
32.3 具有和没有生成器的连贯日历（Java）278
32.4 对于日历使用多个生成器（Java）280
第 33 章函数序列 282
33.1 工作原理 282
33.2 使用场景 283
33.3 简单的计算机配置（Java）283
第 34 章嵌套函数 286
34.1 工作原理 286
34.2 使用场景 287
34.3 简单计算机配置范例（Java）288
34.4 用标记处理多个不同的参数（C#）289
34.5 针对 IDE 支持使用子类型标记（Java）291
34.6 使用对象初始化器（C#）292
34.7 周期性事件（C#）293
34.7.1 语义模型 294
34.7.2DSL296
第 35 章方法级联 299
35.1 工作原理 299
35.1.1 生成器还是值 300
35.1.2 收尾问题 301
35.1.3 分层结构 301
35.1.4 渐进式接口 302
35.2 使用场景 303
35.3 简单的计算机配置范例（Java）303
35.4 带有属性的方法级联（C#）306
35.5 渐进式接口（C#）307
第 36 章对象范围 309
36.1 工作原理 309
36.2 使用场景 310
36.3 安全代码（C#）310
36.3.1　语义模型 311
36.3.2DSL313
36.4 使用实例求值（Ruby）315
36.5 使用实例初始化器（Java）317
第 37 章闭包 319
37.1 工作原理 319
37.2 使用场景 323
第 38 章嵌套闭包 324
38.1 工作原理 324
38.2 使用场景 325
38.3 用嵌套闭包来包装函数序列（Ruby）326
38.4 简单的 C# 示例（C#）327
38.5 使用方法级联（Ruby）328
38.6 带显式闭包参数的函数序列（Ruby）330
38.7 采用实例级求值（Ruby）332
第 39 章列表的字面构造 335
39.1 工作原理 335
39.2 使用场景 335
第 40 章 Literal Map336
40.1 工作原理 336
40.2 使用场景 336
40.3 使用 List 和 Map 表达计算机的配置信息（Ruby）337
40.4 演化为 Greenspun 式（Ruby）338
第 41 章动态接收 342
41.1 工作原理 342
41.2 使用场景 343
41.3 积分——使用方法名解析（Ruby）344
41.3.1 模型 345
41.3.2 生成器 347
41.4 积分——使用方法级联（Ruby）348
41.4.1 模型 349
41.4.2 生成器 349
41.5 去掉安全仪表盘控制器中的引用（JRuby）351
第 42 章标注 357
42.1 工作原理 357
42.1.1 定义标注 358
42.1.2 处理标注 359
42.2 使用场景 360
42.3 用于运行时处理的特定语法（Java）360
42.4 使用类方法（Ruby）362
42.5 动态代码生成（Ruby）363
第 43 章解析树操作 365
43.1 工作原理 365
43.2 使用场景 366
43.3 由 C# 条件生成 IMAP 查询（C#）367
43.3.1 语义模型 367
43.3.2 以 C# 构建 369
43.3.3 退后一步 373
第 44 章类符号表 375
44.1　工作原理 375
44.2 使用场景 376
44.3 在静态类型中实现类符号表（Java）377
第 45 章文本润色 383
45.1 工作原理 383
45.2 使用场景 383
45.3 使用润色的折扣规则（Ruby）384
第 46 章为字面量提供扩展 386
46.1 工作原理 386
46.2 使用场景 387
46.3 食谱配料（C#）387
第五部分　其他计算模型
第 47 章适应性模型 390
47.1 工作原理 390
47.1.1 在适应性模型中使用命令式代码 391
47.1.2 工具 393
47.2 使用场景 394
第 48 章决策表 395
48.1 工作原理 395
48.2 使用场景 396
48.3 为一个订单计算费用（C#）396
48.3.1 模型 397
48.3.2 解析器 400
第 49 章依赖网络 403
49.1 工作原理 403
49.2 使用场景 405
49.3 分析饮料（C#）405
49.3.1 语义模型 406
49.3.2 解析器 407
第 50 章产生式规则系统 409
50.1 工作原理 409
50.1.1 链式操作 410
50.1.2 矛盾推导 411
50.1.3 规则结构里的模式 412
50.2 使用场景 412
50.3 俱乐部会员校验（C#）412
50.3.1 模型 413
50.3.2 解析器 414
50.3.3 演进 DSL414
50.4 适任资格的规则：扩展俱乐部成员（C#）416
50.4.1 模型 417
50.4.2 解析器 419
第 51 章状态机 421
51.1 工作原理 421
51.2 使用场景 423
51.3 安全面板控制器（Java）423
* 第六部分　代 码 生 成
第 52 章基于转换器的代码生成 426
52.1 工作原理 426
52.2 使用场景 427
52.3 安全面板控制器（Java 生成的 C）427
第 53 章模板化的生成器 431
53.1 工作原理 431
53.2 使用场景 432
53.3 生成带有嵌套条件的安全控制面板状态机（Velocity 和 Java 生成的 C）432
第 54 章嵌入助手 438
54.1 工作原理 438
54.2 使用场景 439
54.3 安全控制面板的状态（Java 和 ANTLR）439
54.4 助手类应该生成 HTML 吗（Java 和 Velocity）442
第 55 章基于模型的代码生成 444
55.1 工作原理 444
55.2 使用场景 445
55.3 安全控制面板的状态机（C）445
55.4 动态载入状态机（C）451
第 56 章无视模型的代码生成 454
56.1 工作原理 454
56.2 使用场景 455
56.3 使用嵌套条件的安全面板状态机（C）455
第 57 章代沟 457
57.1 工作原理 457
57.2 使用场景 458
57.3 根据数据结构生成类（Java 和一些 Ruby）459
* 参考文献 463
